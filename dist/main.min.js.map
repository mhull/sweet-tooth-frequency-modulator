{"version":3,"file":"main.min.js","sources":["../src/components/BaseComponent.js","../src/components/SwitchInput/index.js","../src/components/SwitchInput/bootstrap.js","../src/models/Number/Real.js","../src/models/Angle.js","../src/models/Distance2d.js","../src/models/Point2d.js","../src/models/Element.js","../src/models/KnobInteraction.js","../src/models/KnobEventHandler.js","../src/models/Interval1d.js","../src/models/LinearMap1d.js","../src/models/KnobValue.js","../src/models/Knob.js","../src/components/KnobInput/index.js","../main.js","../src/components/Light/index.js","../src/components/Light/bootstrap.js"],"sourcesContent":["export default function(settings) {\n  const component = initializeComponent(settings);\n\n  addClassNames();\n  setPropValues();\n  renderTemplate();\n\n  component.on = (eventType, callback) => component.element.addEventListener(eventType, callback);\n\n  component.emit = (eventType, data) => {\n    let e = new Event(eventType);\n    e.data = data;\n    component.element.dispatchEvent(e);\n  }\n\n  return component;\n\n  function initializeComponent(settings) {\n    let {id, element, template, classNames, props} = settings;\n\n    id = id || element.id;\n    element = element || document.createElement('div');\n    classNames = [...classNames, 'component'];\n    props = props || {};\n\n    return {\n      id,\n      element,\n      template,\n      classNames,\n      props,\n      propValues: {},\n    };\n  }\n\n  function addClassNames() {\n    component.element.classList.add(...component.classNames);\n  }\n\n  function forEachProp(doCallback) {\n    for(let name in component.props) {\n      if(! component.props.hasOwnProperty(name)) {\n        continue;\n      }\n      doCallback(name, component.props[name]);\n    }\n  }\n\n  function setPropValues() {\n    forEachProp(function(name, prop) {\n      component.propValues[name] = getPropValue(name, prop);\n    });\n  }\n\n  function getPropValue(name, prop) {\n    return component.element.hasAttribute(name) ?\n      getPropByElementAttribute(name, prop) :\n      component.element.hasAttribute(`:${name}`) ?\n        getDynamicPropByElementAttribute(name, prop) :\n        prop.hasOwnProperty('default') ?\n          getPropDefaultValue(name, prop) :\n          null;\n  }\n\n  function getPropByElementAttribute(name, prop) {\n    return getPropTypedValue(name, prop, component.element.getAttribute(name));\n  }\n\n  function getDynamicPropByElementAttribute(name, prop) {\n    let value = component.element.getAttribute(`:${name}`);\n    value = Function(`'use strict'; return ${value};`)();\n    return getPropTypedValue(name, prop, value);\n  }\n\n  function getPropDefaultValue(name, prop) {\n    return getPropTypedValue(name, prop, prop.default);\n  }\n\n  function getPropTypedValue(name, prop, value) {\n    return prop.hasOwnProperty('type') && 'function' === typeof prop.type ?\n      prop.type(value) :\n      value;\n  }\n\n  function renderTemplate() {\n    replaceTokens();\n    removeAttributes();\n\n    component.element.innerHTML = component.template;\n  }\n\n  function replaceTokens() {\n    replaceToken('id', component.id);\n    forEachProp(function(name) {\n      replaceToken(name, component.propValues[name] || '');\n    });\n  }\n\n  function replaceToken(tokenName, replacement ) {\n    let tokenRegExp = getTokenRegExp(tokenName);\n    component.template = component.template.replace(tokenRegExp, replacement);\n  }\n\n  function getTokenRegExp(tokenName) {\n    return new RegExp(`{{\\\\s*${tokenName}\\\\s*}}`, 'gm');\n  }\n\n  function removeAttributes() {\n    forEachProp(function(name) {\n      component.element.removeAttribute(name);\n    });\n  }\n}\n","import {getSettings} from './bootstrap';\nimport BaseComponent from '../BaseComponent';\n\nexport default SwitchInput;\n\nfunction SwitchInput(settings) {\n  let component;\n  let _switch;\n  let input;\n\n  component = BaseComponent(getSettings(settings));\n  _switch = component.element.querySelector('.switch.body');\n\n  input = component.element.querySelector('input');\n\n  component.toggle = value => {\n    let hasTurnedOn = 'boolean' === typeof value ?\n      _switch.classList.toggle('on', value) :\n      _switch.classList.toggle('on');\n\n    hasTurnedOn ?\n      input.setAttribute('checked', 'checked') :\n      input.removeAttribute('checked');\n\n    component.emit('toggle', hasTurnedOn);\n  };\n\n  addEventListeners();\n\n  if( component.propValues['isOn'] ) {\n    component.toggle(true);\n  }\n\n  return component;\n\n  function addEventListeners() {\n    _switch.addEventListener('click', component.toggle);\n\n    input.addEventListener('change', () => {\n      input.checked ?\n        component.toggle(true) :\n        component.toggle(false);\n    });\n  }\n};\n","import template from \"./template.html\";\nimport './style.scss';\n\nexport {getSettings};\n\nfunction getSettings(settings) {\n  return {\n    ...settings,\n    classNames: [...(settings.classNames || []), 'switch-input'],\n    template,\n    props: {\n      label: {\n        type: String,\n        default: '',\n      },\n      isOn: {\n        type: Boolean,\n        default: false,\n      },\n    },\n  }\n};\n","export default class {\n  #value;\n\n  constructor(number) {\n    this.#setValue(Number(number));\n  }\n\n  getValue() {\n    return this.#value;\n  }\n\n  #setValue(value) {\n    this.#value = value;\n  }\n\n  hasValue() {\n    return Boolean(this.#value) || 0 === this.#value;\n  }\n};\n","import RealNumber from './Number/Real';\n\nexport default class Angle {\n  #radians;\n  #degrees;\n  #arcsin;\n  #quadrant;\n\n  constructor(settings) {\n    let {radians, degrees, arcsin, quadrant} = settings;\n\n    this.#setRadians(radians);\n    this.#setDegrees(degrees);\n    this.#setArcsin(arcsin);\n    this.#setQuadrant(quadrant);\n  }\n\n  getRadians() {\n    return this.#radians.hasValue() ?\n      this.#radians.getValue() : (\n        this.#degrees.hasValue() ?\n          this.degreesToRadians(this.#degrees.getValue()) : (\n            this.#arcsin.hasValue() && Boolean(this.#quadrant) ?\n              this.arcsinToRadians(this.#arcsin.getValue(), this.#quadrant) :\n              null\n          )\n      );\n  }\n\n  #setRadians(radians) {\n    this.#radians = new RealNumber(radians);\n  }\n\n  getDegrees() {\n    return this.#degrees.hasValue() ?\n      this.#degrees.getValue() :\n      this.radiansToDegrees(this.#radians.getValue());\n  }\n\n  #setDegrees(degrees) {\n    this.#degrees = new RealNumber(degrees);\n  }\n\n  #setArcsin(arcsin) {\n    this.#arcsin = new RealNumber(arcsin);\n  }\n\n  #setQuadrant(quadrant) {\n    this.#quadrant = quadrant;\n  }\n\n  degreesToRadians(degrees) {\n    return degrees * Math.PI / 180;\n  }\n\n  arcsinToRadians(arcsin, quadrant) {\n    return quadrant ? (\n      [1,4].indexOf(quadrant) > -1 ?\n        arcsin :\n        Math.PI - arcsin\n      ) :\n      arcsin;\n  }\n\n  getCssDegrees() {\n    let degrees = this.getDegrees();\n    return -1 * (degrees - 90)\n  }\n\n  radiansToDegrees(radians) {\n    return radians * 180 / Math.PI;\n  }\n\n  plus(angle) {\n    return new Angle({radians: this.getRadians() + angle.getRadians()});\n  }\n\n  minus(angle) {\n    return new Angle({radians: this.getRadians() - angle.getRadians()});\n  }\n};\n","import Angle from './Angle';\n\nexport default class {\n  #fromPoint;\n  #toPoint;\n\n  constructor(settings) {\n    let {fromPoint, toPoint} = settings;\n\n    this.#setFromPoint(fromPoint);\n    this.#setToPoint(toPoint);\n  }\n\n  #setFromPoint(fromPoint) {\n    this.#fromPoint = fromPoint;\n  }\n\n  #setToPoint(toPoint) {\n    this.#toPoint = toPoint;\n  }\n\n  #getX() {\n    return this.#toPoint.getX() - this.#fromPoint.getX();\n  }\n\n  #getY() {\n    // Note the positive y-direction is \"down\" in the browser, but we use \"up\"; thus the reversal when compared to `getX()`\n    return this.#fromPoint.getY() - this.#toPoint.getY();\n  }\n\n  #measure() {\n    let distXsq = Math.pow(this.#getX(), 2);\n    let distYsq = Math.pow(this.#getY(), 2);\n\n    return Math.sqrt( distXsq + distYsq );\n  }\n\n  getAngle() {\n    return new Angle({\n      arcsin: Math.asin(this.#getY() / this.#measure()),\n      quadrant: this.#getVectorQuadrant(),\n    });\n  }\n\n  #getVectorQuadrant() {\n    let y = this.#getY();\n\n    return this.#getX() > 0 ?\n      (y > 0 ? 1 : 4) :\n      (y > 0 ? 2 : 3 );\n  }\n}\n","import Distance2d from './Distance2d';\n\nexport default class {\n  #x;\n  #y;\n\n  constructor(coordinates) {\n    this.#x = coordinates[0];\n    this.#y = coordinates[1];\n  }\n\n  getX() {\n    return this.#x;\n  }\n\n  getY() {\n    return this.#y;\n  }\n\n  getDistanceTo(point) {\n    return new Distance2d({fromPoint: this, toPoint: point});\n  }\n}\n","import Point2d from \"./Point2d\";\n\nexport default class {\n  #node;\n\n  constructor(el) {\n    this.#setNode(el);\n  }\n\n  getNode() {\n    return this.#node;\n  }\n\n  #setNode(el) {\n    this.#node = el;\n  }\n\n  getCenter() {\n    const rect = this.#node.getBoundingClientRect()\n\n    return new Point2d([\n      this.#getCenterX(rect),\n      this.#getCenterY(rect),\n    ]);\n  }\n\n  #getCenterX(rect) {\n    return (rect.left + rect.right)/2;\n  }\n\n  #getCenterY(rect) {\n    return (rect.top + rect.bottom)/2;\n  }\n\n  emit(eventType, data) {\n    let event = new Event(eventType);\n    event.data = data;\n    this.getNode().dispatchEvent(event);\n  }\n\n  on(eventType, callback) {\n    this.getNode().addEventListener(eventType, callback);\n  }\n}\n","import Point2d from './Point2d';\n\nexport default class {\n  #knob;\n  #initialEvent;\n  #currentEvent;\n\n  #initialKnobAngle;\n  #initialClientAngle;\n\n  constructor(settings) {\n    let {knob, initialEvent} = settings;\n    this.#setKnob(knob);\n    this.#setInitialEvent(initialEvent);\n    this.#setCurrentEvent(initialEvent);\n\n    this.#setInitialKnobAngle();\n    this.#setInitialClientAngle();\n  }\n\n  #setKnob(knob) {\n    this.#knob = knob;\n  }\n\n  #setInitialEvent(event) {\n    this.#initialEvent = event;\n  }\n\n  #setCurrentEvent(event) {\n    this.#currentEvent = event;\n  }\n\n  #setInitialKnobAngle() {\n    this.#initialKnobAngle = this.#knob.getAngle();\n  }\n\n  #setInitialClientAngle() {\n    this.#initialClientAngle = this.#getClientAngle();\n  }\n\n #getPosition(event) {\n    return new Point2d(this.#getCoordinates(event));\n  }\n\n  #getCoordinates(event) {\n    return this.#isDragEvent(event) ?\n      this.#getMouseCoordinates(event) :\n      this.#getTouchCoordinates(event);\n  }\n\n  #isDragEvent(event) {\n    return ['dragstart', 'dragover'].indexOf(event.type) > -1;\n  }\n\n  #getMouseCoordinates(event) {\n    return [\n      event.pageX,\n      event.pageY\n    ];\n  }\n\n  #getTouchCoordinates(event) {\n    return [\n      event.changedTouches[0].pageX,\n      event.changedTouches[0].pageY,\n    ]\n  }\n\n  #getClientPosition() {\n    return this.#getPosition(this.#currentEvent);\n  }\n\n  #getClientDistanceToCenter() {\n    return this.#knob\n      .getElement()\n      .getCenter()\n      .getDistanceTo(this.#getClientPosition());\n  }\n\n  #getClientAngle() {\n    return this.#getClientDistanceToCenter().getAngle();\n  }\n\n  respondTo(event) {\n    this.#setCurrentEvent(event);\n\n    let clientAngle = this.#getClientAngle();\n\n    let rotationAmount = clientAngle.minus(this.#initialClientAngle);\n    let angle = this.#initialKnobAngle.plus(rotationAmount)\n\n    this.#knob.rotateTo({angle});\n  }\n};\n","import KnobInteraction from \"./KnobInteraction\";\n\nexport default class {\n  #knob;\n  #isTurning = false;\n  #currentInteraction;\n\n  constructor(settings) {\n    let {knob} = settings;\n    this.#setKnob(knob);\n\n    this.listen();\n  }\n\n  #setKnob(knob) {\n    this.#knob = knob;\n  }\n\n  #getKnobNode() {\n    return this.#knob.getElement().getNode();\n  }\n\n  listen() {\n    let el = this.#getKnobNode();\n\n    /** Desktop (drag) **/\n    el.addEventListener('dragstart', this.#dragstart.bind(this));\n    el.addEventListener('dragend', this.dragend.bind(this));\n    document.addEventListener('dragover', this.dragover.bind(this));\n\n    /** Non-Desktop (touch) **/\n    el.addEventListener('touchstart', this.touchstart.bind(this));\n    el.addEventListener('touchmove', this.touchmove.bind(this));\n  }\n\n  #dragstart(event) {\n    this.#setCurrentInteraction(event);\n    this.#setDragImage(event);\n    this.#isTurning = true;\n  }\n\n  #setDragImage(event) {\n    event.dataTransfer.setDragImage(document.createElement('div'), 0, 0);\n  }\n\n  dragend() {\n    this.#isTurning = false;\n  }\n\n  dragover(event) {\n    if(! this.#isTurning) {\n      return;\n    }\n    this.#currentInteraction.respondTo(event);\n  }\n\n  touchstart(event) {\n    this.#setCurrentInteraction(event);\n  }\n\n  touchmove(event) {\n    this.#currentInteraction.respondTo(event);\n  }\n\n  #setCurrentInteraction(event) {\n    this.#currentInteraction = new KnobInteraction({\n      knob: this.#knob,\n      initialEvent: event,\n    });\n  }\n};\n","export default class {\n  #min;\n  #max;\n\n  #minValue;\n  #maxValue;\n\n  getValue;\n\n  /**\n   * @var {object} settings\n   *   @property min\n   *   @property max\n   */\n  constructor(settings) {\n    let {min, max, getValue} = settings;\n\n    this.#setMin(min);\n    this.#setMax(max);\n\n    if( ! getValue ) {\n      getValue = this.#getValueDefaultCallback;\n    }\n    this.#setGetValue(getValue);\n\n    this.#setMinValue();\n    this.#setMaxValue();\n  }\n\n  getMin() {\n    return this.#min;\n  }\n\n  #setMin(min) {\n    this.#min = min;\n  }\n\n  getMinValue() {\n    return this.#minValue;\n  }\n\n  #setMinValue() {\n    this.#minValue = Number(this.getValue(this.#min));\n  }\n\n  getMax() {\n    return this.#max;\n  }\n\n  #setMax(max) {\n    this.#max = max;\n  }\n\n  getMaxValue() {\n    return this.#maxValue;\n  }\n\n  #setMaxValue() {\n    this.#maxValue = Number(this.getValue(this.#max));\n  }\n\n  #setGetValue(callback) {\n    this.getValue = callback;\n  }\n\n  #getValueDefaultCallback(item) {\n    return Number(item);\n  }\n\n  contains(item) {\n    let value = Number(this.getValue(item));\n    return this.#minValue <= value && value <= this.#maxValue;\n  }\n\n  getNearestItem(possibleItem) {\n    if(this.getValue(possibleItem) < this.getMinValue()) {\n      return this.getMin();\n    }\n    if(this.getValue(possibleItem) > this.getMaxValue()) {\n      return this.getMax();\n    }\n    return possibleItem;\n  }\n};\n","export default class {\n  #domain;\n  #range;\n  #isReversed;\n\n  #scale;\n  #translateAmount;\n\n  constructor(settings) {\n    let {domain, range, isReversed} = settings;\n    this.setDomain(domain);\n    this.setRange(range);\n    this.setReversed(isReversed);\n\n    this.setScale();\n    this.setTranslateAmount();\n  }\n\n  setDomain(value) {\n    this.#domain = value;\n  }\n\n  setRange(value) {\n    this.#range = value;\n  }\n\n  setReversed(value) {\n    this.#isReversed = value;\n  }\n\n  setScale() {\n    let rangeDiff = this.#range.getMaxValue() - this.#range.getMinValue();\n    let domainDiff = this.#domain.getMaxValue() - this.#domain.getMinValue();\n\n    let scale = rangeDiff / domainDiff;\n\n    this.#scale = this.#isReversed ?\n      scale * -1 :\n      scale;\n  }\n\n  setTranslateAmount() {\n    this.#translateAmount = this.#isReversed ?\n      this.#range.getMaxValue() :\n      this.#range.getMinValue();\n  }\n\n  map(domainItem) {\n    let domainValue = this.#domain.getValue(domainItem);\n\n    let distanceFromMin = Math.abs(domainValue - this.#domain.getMinValue());\n    return distanceFromMin * this.#scale + this.#translateAmount;\n  }\n\n  getInverse(rangeItem) {\n    let rangeValue = this.#range.getValue(rangeItem);\n\n    return ((rangeValue - this.#translateAmount) / this.#scale ) + this.#domain.getMinValue();\n  }\n};\n","import Angle from \"./Angle\";\nimport LinearMap1d from \"./LinearMap1d\";\n\nexport default class {\n  #knob;\n  #range;\n\n  #mapping;\n\n  constructor(settings) {\n    let {knob, range, isReverseMapping} = settings;\n\n    this.#setKnob(knob);\n    this.#setRange(range);\n\n    this.#setMapping(Boolean(isReverseMapping));\n  }\n\n\n  #setKnob(knob) {\n    this.#knob = knob;\n  }\n\n  #setRange(range) {\n    this.#range = range;\n  }\n\n  #setMapping(isReversed) {\n    this.#mapping = new LinearMap1d({\n      domain: this.#knob.getRange(),\n      range: this.#range,\n      isReversed,\n    });\n  }\n\n  getValue(angle) {\n    return this.#mapping.map(angle);\n  }\n\n  getAngle(value) {\n    return new Angle({radians: this.#mapping.getInverse(value)});\n  }\n};\n","import El from './Element';\nimport KnobEventHandler from './KnobEventHandler';\n\nimport Angle from './Angle';\nimport Interval1d from './Interval1d';\nimport KnobValue from \"./KnobValue\";\n\nexport default class {\n  #element;\n  #range;\n  #angle;\n\n  #value;\n  #eventHandler;\n\n  constructor(settings) {\n    let {element, range, initialValue} = settings;\n    this.#setElement(element);\n    this.#setRange(range);\n\n    this.#setValue();\n\n    let initialAngle = initialValue ?\n      this.#value.getAngle(initialValue) :\n      this.#getDefaultAngle();\n\n    this.#setAngle(initialAngle);\n\n\n    this.#setEventHandler();\n    this.#rotateToAngle(this.#angle);\n  }\n\n  getElement() {\n    return this.#element;\n  }\n\n  #setElement(el) {\n    this.#element = new El(el);\n  }\n\n  #getNode() {\n    return this.getElement().getNode();\n  }\n\n  getRange() {\n    return this.#range;\n  }\n\n  #setRange(range) {\n    if( ! range ) {\n      range = this.#getDefaultRange();\n    }\n    this.#range = range;\n  }\n\n  #getDefaultRange() {\n    return new Interval1d({\n      min: new Angle({degrees: -45}),\n      max: new Angle({degrees: 225}),\n      getValue: angle => angle.getRadians(),\n    });\n  }\n\n  getAngle() {\n    return this.#angle;\n  }\n\n  #setAngle(angle) {\n    this.#angle = angle;\n  }\n\n  #getDefaultAngle() {\n    return this.getRange().getMax();\n  }\n\n  getValue(angle) {\n    angle = angle || this.#angle;\n    return this.#value.getValue(angle);\n  }\n\n  #setValue() {\n    this.#value = new KnobValue({\n      knob: this,\n      range: new Interval1d({\n        min: 0,\n        max: 100,\n      }),\n      isReverseMapping: true,\n    })\n  }\n\n  #setEventHandler() {\n    this.#eventHandler = new KnobEventHandler({\n      knob: this,\n    });\n  }\n\n  rotateTo(to) {\n    let {angle, value} = to;\n\n    if(! angle) {\n      angle = this.#value.getAngle(value);\n    }\n    this.#rotateToAngle(angle);\n  }\n\n  #rotateToAngle(angle) {\n    let range = this.getRange();\n\n    if(! range.contains(angle)) {\n      angle = range.getNearestItem(angle);\n    }\n    this.#setAngle(angle);\n    this.#setCssRotationAmount();\n\n    this.getElement().emit('rotate', angle);\n  }\n\n  #setCssRotationAmount() {\n    let degrees = this.getAngle().getCssDegrees();\n    this.#getNode().style.transform = `rotate(${degrees}deg)`;\n  }\n\n  on(eventType, callback) {\n    this.getElement().on(eventType, callback);\n  }\n};\n","import './style.scss';\nimport template from './template.html';\nimport defaultSvg from './default.svg';\n\nimport Knob from '../../models/Knob';\n\n/**\n * @param {object} settings\n *\n * @property element\n *   (Required) Element whose innerHTML will be replaced with component template\n *\n * @property initialValue\n *   (Default: 0)\n */\nexport default function(settings) {\n  let knob;\n  let input;\n  let initialValue;\n  let svg;\n\n  initialize();\n\n  return knob;\n\n  function initialize() {\n    injectTemplate();\n\n    initialValue = settings.initialValue || 0;\n    svg = settings.svg || defaultSvg;\n\n    setKnob();\n    setInput();\n\n    let svgContainer = document.createElement('div');\n    svgContainer.innerHTML = svg;\n    getKnobElement().appendChild(svgContainer);\n\n    setInputValue(initialValue);\n    addEventListeners();\n  }\n\n  function setKnob() {\n    knob = new Knob({\n      element: getKnobElement(),\n      initialValue,\n    });\n  }\n\n  function getKnobElement() {\n    return settings.element.querySelector(getKnobSelector());\n  }\n\n  function getKnobSelector() {\n    return '.knob.body';\n  }\n\n  function setInput() {\n    input = settings.element.querySelector('.knob.input input');\n  }\n\n  function injectTemplate() {\n    let container = settings.element;\n\n    container.classList.add('knob', 'component')\n    container.innerHTML = template;\n  }\n\n  function setInputValue(value) {\n    input.value = value;\n  }\n\n  function addEventListeners() {\n    input.addEventListener('change', changeInputValue);\n    knob.on('rotate', handleRotateEvent);\n  }\n\n  function handleRotateEvent(e) {\n    setInputValue(knob.getValue(e.data));\n  }\n\n  function changeInputValue(event) {\n    let value = parseFloat(event.target.value);\n    (value || 0 === value) && knob.rotateTo({value});\n  }\n}\n","import SwitchInput from './src/components/SwitchInput';\nimport Light from './src/components/Light';\nimport KnobInput from './src/components/KnobInput';\n\nimport './main.scss';\nimport LinearMap1d from \"./src/models/LinearMap1d\";\nimport Interval1d from \"./src/models/Interval1d\";\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioCtx = new AudioContext();\n\nconst gainNode = audioCtx.createGain();\n\ngainNode.connect(audioCtx.destination);\n\nlet oscillator;\n\nconst play = () => {\n  gainNode.gain.setValueAtTime(0, audioCtx.currentTime);\n\n  oscillator = audioCtx.createOscillator();\n  oscillator.type = 'sine';\n  oscillator.connect(gainNode);\n  oscillator.frequency.setValueAtTime(440, audioCtx.currentTime);\n  oscillator.start();\n\n  gainNode.gain.linearRampToValueAtTime(knobValueToVolume(volumeKnob.getValue()), audioCtx.currentTime);\n};\n\nconst pause = () => {\n  gainNode.gain.linearRampToValueAtTime(0, audioCtx.currentTime + 0.2);\n  oscillator.stop(audioCtx.currentTime + 1);\n};\n\nlet mode = 'THRM';\n\nconst freqMapping = new LinearMap1d({\n\n  domain: new Interval1d({\n    min: 0,\n    max: 100,\n  }),\n  range: new Interval1d({\n    min: 440,\n    max: 880,\n  }),\n});\n\nconst notes = [440, 493.88, 554.37, 587.33, 659.25, 739.99, 830.61, 880.00];\n\nconst getClosestNoteFreq = freq => {\n  let lastDist;\n\n  return notes.reduce((acc, note) => {\n    let dist = Math.abs(freq - note);\n\n    if( null === acc ) {\n      lastDist = dist;\n      return note;\n    }\n\n    if( lastDist < dist ) {\n      return acc;\n    }\n\n    lastDist = dist;\n    return note;\n  }, null);\n};\n\nconst knobValueToFreq = value => {\n  let rawFreq = freqMapping.map(value);\n  return 'THRM' === mode ?\n    rawFreq :\n    getClosestNoteFreq(rawFreq);\n}\n\nconst knobValueToVolume = value => {\n  let ratio = 0.01;\n  return value * ratio;\n}\n\nconst powerSwitch = SwitchInput({\n  element: document.querySelector('#switch-power'),\n});\n\nconst typeSwitch = SwitchInput({\n  element: document.querySelector('#switch-type'),\n});\n\nconst light = Light({\n  element: document.querySelector('#light'),\n});\n\nconst volumeKnob = KnobInput({\n  element: document.querySelector('#knob-volume'),\n  initialValue: 40,\n});\n\nconst freqKnob = KnobInput({\n  element: document.querySelector('#knob-freq'),\n  initialValue: 0,\n});\n\npowerSwitch.on('toggle', ev => {\n  const value = ev.data;\n  light.toggle(value);\n  value ? play() : pause();\n});\n\ntypeSwitch.on('toggle', ev => {\n  const value = ev.data;\n  mode = value ? 'MUS' : 'THRM';\n});\n\nvolumeKnob.on('rotate', ({data}) => {\n  gainNode.gain.linearRampToValueAtTime(knobValueToVolume(freqKnob.getValue(data)), audioCtx.currentTime + 0.1);\n});\n\nfreqKnob.on('rotate', ({data}) => {\n  const value = freqKnob.getValue(data);\n  const freq = knobValueToFreq(value);\n  oscillator.frequency.setValueAtTime(freq, audioCtx.currentTime)\n});\n","import {getSettings} from './bootstrap';\nimport BaseComponent from \"../BaseComponent\";\n\nexport default function(settings) {\n  const component = BaseComponent(getSettings(settings));\n\n  const light = component.element.querySelector('.light.body');\n\n  component.toggle = value => {\n    let hasTurnedOn = 'boolean' === typeof value ?\n      light.classList.toggle('on', value) :\n      light.classList.toggle('on');\n\n    component.emit('toggle', hasTurnedOn);\n  }\n\n  if( component.propValues['isOn'] ) {\n    component.toggle(true);\n  }\n\n  return component;\n}\n","import template from './template.html';\nimport './style.scss';\n\nexport {getSettings};\n\nfunction getSettings(settings) {\n  let {element, classNames} = settings;\n\n  classNames = [...(classNames || []), 'light'];\n\n  return {\n    template,\n    element,\n    classNames,\n    props: {\n      isOn: {\n        type: Boolean,\n        default: false,\n      },\n    },\n  };\n}\n"],"names":["settings","component","id","element","template","classNames","props","document","createElement","propValues","initializeComponent","classList","add","forEachProp","name","prop","hasAttribute","getPropTypedValue","getAttribute","getPropByElementAttribute","value","Function","getDynamicPropByElementAttribute","hasOwnProperty","getPropDefaultValue","getPropValue","replaceToken","removeAttribute","innerHTML","on","eventType","callback","addEventListener","emit","data","e","Event","dispatchEvent","doCallback","type","tokenName","replacement","tokenRegExp","RegExp","getTokenRegExp","replace","SwitchInput","_switch","input","BaseComponent","label","String","isOn","Boolean","getSettings","querySelector","toggle","hasTurnedOn","setAttribute","checked","number","Number","this","Angle","radians","degrees","arcsin","quadrant","_classPrivateFieldGet","hasValue","getValue","degreesToRadians","arcsinToRadians","radiansToDegrees","Math","PI","indexOf","getDegrees","angle","getRadians","RealNumber","fromPoint","toPoint","asin","_classPrivateMethodGet","getX","getY","distXsq","pow","distYsq","sqrt","y","coordinates","point","Distance2d","el","rect","getBoundingClientRect","Point2d","event","getNode","left","right","top","bottom","knob","initialEvent","rotationAmount","minus","plus","rotateTo","getAngle","pageX","pageY","changedTouches","getElement","getCenter","getDistanceTo","listen","bind","dragend","dragover","touchstart","touchmove","respondTo","dataTransfer","setDragImage","KnobInteraction","min","max","item","possibleItem","getMinValue","getMin","getMaxValue","getMax","domain","range","isReversed","setDomain","setRange","setReversed","setScale","setTranslateAmount","scale","domainItem","domainValue","abs","rangeItem","isReverseMapping","map","getInverse","LinearMap1d","getRange","initialValue","initialAngle","to","El","Interval1d","KnobValue","KnobEventHandler","contains","getNearestItem","getCssDegrees","style","transform","svg","container","Knob","getKnobElement","svgContainer","appendChild","setInputValue","changeInputValue","handleRotateEvent","initialize","parseFloat","target","oscillator","audioCtx","window","AudioContext","webkitAudioContext","gainNode","createGain","connect","destination","mode","freqMapping","notes","knobValueToFreq","freq","lastDist","rawFreq","reduce","acc","note","dist","knobValueToVolume","powerSwitch","typeSwitch","light","Light","volumeKnob","KnobInput","freqKnob","ev","gain","setValueAtTime","currentTime","createOscillator","frequency","start","linearRampToValueAtTime","stop"],"mappings":"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"}